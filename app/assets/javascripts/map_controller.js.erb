function MapController(applicationController) {
  this.map = null
  this.parent = applicationController
  this.markers = []
  this.infoWindows = []
  this.searchType = 'restaurants'
  this.customSearchTerm = null
  this.positionMarker = null
  this.gpsActive = false
  this.gpsWatchId = null
}

MapController.prototype = {
  init: function() {
    var mapOptions = {
          center: { lat: 40.183988, lng: -95.726231},
          zoom: 4,
          zoomControl: false,
          panControl: false,
          mapTypeControl: false,
          streetViewControl: false
        };
    this.map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
    this.setListeners()
    this.spinRefreshIcon()
  },

  setListeners: function() {
    $('#map-canvas').on('markerClicked, markerHover', this.buildAndShowInfoWindow.bind(this))
    $('#map-canvas').on('markerClicked, markerHover', this.getAdditionalYelpInfo.bind(this))
    $('#refresh-results').on('click', this.refreshResultsByMapBounds.bind(this))
    google.maps.event.addListener(this.map, 'click', this.closeAllInfoWindowsAndSearchOptions.bind(this))
    $('#coffee-search').on('click', this.coffeeSearch.bind(this))
    $('#bars-search').on('click', this.barsSearch.bind(this))
    $('#restaurants-search').on('click', this.restaurantsSearch.bind(this))
    $('#current-search-type').on('click', this.toggleSearchOptions.bind(this))
    // $('#gps-toggle').on('click', this.centerMapOnPositionMarker.bind(this))
    $('#gps-toggle').on('click', this.toggleGpsActive.bind(this))
    $('form#custom-search-form').on('submit', this.customSearchFormSubmitted.bind(this))
    $('#custom-search-toggle').on('click', this.toggleCustomSearch.bind(this))
  },

  centerMapOnPositionMarker: function() {
    var coords = {
      lat: this.positionMarker.position.k,
      lng: this.positionMarker.position.B
    }
    // debugger
    this.map.panTo(coords)
  },

  showCurrentSearchType: function() {
    $('#current-search-type img').addClass('hidden')
    $('#'+this.searchType+'-current-search').removeClass('hidden')
  },

  toggleGpsActive: function() {
    var $gpsActive = $('#gps-active'),
        $gpsInactive = $('#gps-inactive')
    if($gpsActive.is(':visible')) {
      this.gpsActive = false
      $gpsActive.addClass('hidden')
      $gpsInactive.removeClass('hidden')
      this.stopFollowingUserPosition()
    } else {
      this.gpsActive = true
      $gpsActive.removeClass('hidden')
      $gpsInactive.addClass('hidden')

      navigator.geolocation.getCurrentPosition(function(position) {
        var coords = {lat: position.coords.latitude, lng: position.coords.longitude}
        this.setPositionMarker(coords)
        this.map.panTo(coords)
        this.followUserPosition()
      }.bind(this),
      this.parent.locationError.bind(this.parent),
      {enableHighAccuracy: true})
    }
  },

  toggleSearchOptions: function() {
    var $searchOptions = $('ul.actions')
    if($searchOptions.is(':visible')) {
      $searchOptions.addClass('hidden')
      this.showCurrentSearchType()
    } else {
      $searchOptions.removeClass('hidden')
      $('#current-search-type img').addClass('hidden')
      $('#search-options-open').removeClass('hidden')
    }
  },

  toggleCustomSearch: function() {
    var $searchFormContainer = $('#search-form-container')
    if($searchFormContainer.is(':visible')) {
      this.hideCustomSearch()
    } else {
      $searchFormContainer.removeClass('hidden')
      $searchFormContainer.find('input#term').attr('placeholder', this.customSearchTerm)
      $('#show-custom-search').addClass('hidden')
      $('#cancel-custom-search').removeClass('hidden')
    }
  },

  hideCustomSearch: function() {
    var $searchFormContainer = $('#search-form-container')
    $searchFormContainer.addClass('hidden')
    $('#show-custom-search').removeClass('hidden')
    $('#cancel-custom-search').addClass('hidden')
    this.clearSearchForm()
  },

  customSearchFormSubmitted: function(e) {
    e.preventDefault()
    var $form = $('#custom-search-form')
    this.searchType = 'custom'
    this.customSearchTerm = $form.find('#term').val()
    this.customSearch()
  },

  customSearch: function() {
    var $form = $('#custom-search-form')
    this.spinRefreshIcon()

    var bounds = this.map.getBounds()

    var searchParams = {
      sw_latitude: bounds.getSouthWest().k,
      sw_longitude: bounds.getSouthWest().B,
      ne_latitude: bounds.getNorthEast().k,
      ne_longitude: bounds.getNorthEast().B,
      search_type: this.searchType,
      term: this.customSearchTerm
    }
    var ajaxRequest = $.ajax({
      url: $form.attr('action'),
      method: 'GET',
      data: searchParams
    })

    ajaxRequest.success(function(businesses) {
      this.buildModelsSetMarkers(businesses)
      this.hideCustomSearch()
      this.showCurrentSearchType()
      $('ul.actions').addClass('hidden')
    }.bind(this))

  },

  clearSearchForm: function() {
    var $form = $('#custom-search-form')
    $form.find('#term').val('')
  },

  restaurantsSearch: function() {
    this.searchType = 'restaurants'
    this.refreshResultsByMapBounds()
    this.toggleSearchOptions()
    this.customSearchTerm = null
  },

  barsSearch: function() {
    this.searchType = 'bars'
    this.refreshResultsByMapBounds()
    this.toggleSearchOptions()
    this.customSearchTerm = null
  },

  coffeeSearch: function() {
    this.searchType = 'coffee'
    this.refreshResultsByMapBounds()
    this.toggleSearchOptions()
    this.customSearchTerm = null
  },

  refreshResultsByMapBounds: function() {
    var bounds = this.map.getBounds()
    var searchParams = {
      sw_latitude: bounds.getSouthWest().lat(),
      sw_longitude: bounds.getSouthWest().lng(),
      ne_latitude: bounds.getNorthEast().lat(),
      ne_longitude: bounds.getNorthEast().lng(),
      search_type: this.searchType
    }
    this.spinRefreshIcon()
    // this.updatePositionMarkerWithCurrentLocation()

    if (this.searchType === 'custom') {
      this.customSearch()
    } else {
      var ajaxRequest = $.ajax({
        url: '/bounds_search',
        type: 'GET',
        data: searchParams
      })

      ajaxRequest.done(this.buildModelsSetMarkers.bind(this))
    }

  },

  buildAndShowInfoWindow: function(e, marker) {
    var yelpId = marker.yelpId,
        business = this.parent.findByAttribute(this.parent.models.businesses, 'yelp_id', yelpId)
    var infoWindow = new google.maps.InfoWindow({
      content: HandlebarsTemplates['infowindow'](business),
      yelpId: yelpId
    })

    this.infoWindows.push(infoWindow)
    this.closeAllInfoWindows()
    // this.closeAllInfoWindowsAndSearchOptions()
    infoWindow.open(this.map, marker)
  },

  getAdditionalYelpInfo: function(e, marker) {
    var yelpId = marker.yelpId,
    business = this.parent.findByAttribute(this.parent.models.businesses, 'yelp_id', yelpId)

    if(!business.additional_yelp_info_obtained) {
      var ajaxRequest = $.ajax({
        url: '/additional_yelp_details',
        type: 'GET',
        data: {yelp_page_url: business.yelp_page_url}
      })

      ajaxRequest.done(function(additionalAttributes) {
        for(var attribute in additionalAttributes) {
          var value = additionalAttributes[attribute]
          business[attribute] = value
        }
        this.updateInfoWindow(business)
      }.bind(this))
    }

    business.additional_yelp_info_obtained = true
  },

  updateInfoWindow: function(business) {
    var infoWindowResults = this.parent.selectByAttributeId(this.infoWindows, 'yelpId', business.yelp_id),
        infoWindow = infoWindowResults[infoWindowResults.length-1]

    var infoWindowContent = HandlebarsTemplates['infowindow'](business)
    infoWindow.setContent(infoWindowContent)

  },

  closeAllInfoWindows: function() {
    var infoWindowCount = this.infoWindows.length
    for (var i=0; i<infoWindowCount; i++) {
      this.infoWindows[i].close()
    }
  },

  closeAllInfoWindowsAndSearchOptions: function(e, marker) {
    // var infoWindowCount = this.infoWindows.length
    // for (var i=0; i<infoWindowCount; i++) {
    //   this.infoWindows[i].close()
    // }
    this.closeAllInfoWindows()
    $('ul.actions').addClass('hidden')
    this.showCurrentSearchType()
    this.hideCustomSearch()
  },

  setMarkerListeners: function() {
    var markers = this.markers,
        markerCount = markers.length
    for(var i=0; i<markerCount; i++) {
      var marker = markers[i]
      google.maps.event.addListener(marker, 'click', function() {
          $('#map-canvas').trigger('markerClicked', [this])
      })
      google.maps.event.addListener(marker, 'mouseover', function() {
          $('#map-canvas').trigger('markerHover', [this])
      })
      google.maps.event.addListener(marker, 'mouseout', function() {
          $('#map-canvas').trigger('markerLeaveHover', [this])
      })
    }
  },

  updateMap: function(coords) {
    this.map.panTo(coords)
    this.map.setZoom(13)
    var ajaxRequest = $.ajax({
      url: '/coords_search',
      type: 'GET',
      data: coords
    })

    this.setPositionMarker(coords)

    ajaxRequest.done(this.buildModelsSetMarkers.bind(this))
  },

  updatePositionMarkerWithCurrentLocation: function() {
    navigator.geolocation.getCurrentPosition(function(position) {
        var coords = {lat: position.coords.latitude, lng: position.coords.longitude}
        this.setPositionMarker(coords)
    }.bind(this), this.parent.locationError.bind(this.parent),{enableHighAccuracy: true})
  },

  followUserPosition: function() {
    this.gpsWatchId = navigator.geolocation.watchPosition(function(position) {
      var coords = {lat: position.coords.latitude, lng: position.coords.longitude}
      this.setPositionMarker(coords)
    }.bind(this), this.parent.locationError.bind(this.parent),{enableHighAccuracy: true})
  },

  stopFollowingUserPosition: function() {
    navigator.geolocation.clearWatch(this.gpsWatchId)
  },

  setPositionMarker: function(coords) {
    if (this.positionMarker) {
      this.positionMarker.setMap(null)
      this.positionMarker = null
    }
    this.positionMarker = new google.maps.Marker({
      position: coords,
      clickable: false,
      map: this.map,
      icon: '<%= asset_path("blue-dot.png") %>'
    });
  },

  spinRefreshIcon: function() {
    $('#refresh-results').addClass('spin')
  },

  stopSpinRefreshIcon: function() {
    $('#refresh-results').removeClass('spin')
  },

  buildModelsSetMarkers: function(businesses) {
    this.parent.models.businesses = []
    var businessCount = businesses.length
    for(var i=0; i<businessCount; i++) {
      var business = businesses[i]
      if(!business.permenantly_closed) {
        this.parent.models.businesses.push(new BusinessModel(business))
      }
    }
    this.clearMarkers()
    this.setBusinessMarkers()
    this.setMarkerListeners()
    this.stopSpinRefreshIcon()
  },

  clearMarkers: function() {
    var markers = this.markers,
        markerCount = markers.length

    for(var i=0; i<markerCount; i++) {
      var marker = markers[i]
      marker.setMap(null)
    }
    markers = []
  },

  setBusinessMarkers: function() {
    var businessModels = this.parent.models.businesses
    var businessModelCount = businessModels.length
    for(var i=0; i<businessModelCount; i++) {
      var businessModel = businessModels[i]
      this.createBusinessMarker(businessModel)
    }
  },

  createBusinessMarker: function(businessModel) {
    var marker = new google.maps.Marker({
        position: {lat: businessModel.latitude, lng: businessModel.longitude},
        map: this.map,
        title: businessModel.name,
        yelpId: businessModel.yelp_id
    })
    this.markers.push(marker)
  }
}
